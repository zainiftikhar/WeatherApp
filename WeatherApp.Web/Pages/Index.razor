@page "/"
@using WeatherApp.Core.Interfaces
@using WeatherApp.Models
@inject IWeatherService Weather

<h1 class="mb-4">Weather</h1>

<div class="mb-3">
    <input class="form-control" placeholder="Enter city (e.g., London)"
           @bind="city" @bind:event="oninput" />
</div>

<div class="d-flex gap-2 mb-4">
    <button class="btn btn-primary" @onclick="GetWeather" disabled="@isLoading">Get Weather</button>
    <select class="form-select w-auto" @bind="units">
        <option value="metric">°C</option>
        <option value="imperial">°F</option>
    </select>
</div>

@if (isLoading)
{
    <p>Loading…</p>
}
else if (!string.IsNullOrEmpty(error))
{
    <div class="alert alert-danger">@error</div>
}
else if (data is not null)
{
    <div class="card shadow-sm">
        <div class="card-body">
            <h3 class="card-title">@data.Name</h3>
            <p class="card-text mb-1"><strong>@(data.Weather?.FirstOrDefault().Description ?? "N/A")</strong> — @data.Weather?.FirstOrDefault()?.Description</p>
            <p class="mb-1">Temp: <strong>@Math.Round(data.Main?.Temp ?? 0)</strong> @(units == "metric" ? "°C" : "°F")
                (Feels like @Math.Round(data.Main?.Feels_Like ?? 0))</p>
            <p class="mb-1">Humidity: @data.Main?.Humidity% | Wind: @data.Wind?.Speed m/s</p>
        </div>
    </div>
}

@code {
    string city = "";
    string units = "metric";
    bool isLoading = false;
    string? error;
    WeatherResponse? data;

    async Task GetWeather()
    {
        error = null;
        data = null;

        if (string.IsNullOrWhiteSpace(city))
        {
            error = "Please enter a city.";
            return;
        }

        isLoading = true;
        try
        {
            data = await Weather.GetCurrentAsync(city.Trim(), units);
            if (data is null)
                error = $"No weather found for “{city}”.";
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
        }
    }
}
